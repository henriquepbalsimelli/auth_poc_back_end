# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python

name: Python application

on:
  pull_request:
    branches:
      - master

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.8.10
      uses: actions/setup-python@v3
      with:
        python-version: "3.8.10"
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install octokit
    - name: Test with pytest
      run: |
        pip install pytest pytest-cov
        pytest tests
    - name: Run tests with coverage
      run: |
        pytest --cov=tests tests/
        coverage report --fail-under=80
    - name: Criar Issue em caso de falha nos testes
      if: ${{ failure() }}
      run: |
        curl -L \
          -X POST \
          -H "Accept: application/vnd.github+json" \
          -H "Authorization: token ${{ secrets.TOKEN_TEST }}"\
          -H "X-GitHub-Api-Version: 2022-11-28" \
          https://api.github.com/repos/henriquepbalsimelli/auth_poc_back_end/issues \
          -d '{"title":"Found a bug","body":"I'\''m having a problem with this.","labels":["bug"]}'
    - name: Extract coverage percentage
      id: coverage
      run: |
        coverage_percentage=$(coverage report | awk 'END{print $NF}' | cut -d '%' -f 1)
        echo $coverage_percentage
    - name: Set coverage percentage output
      run: echo "{percentage}={$coverage_percentage}" >> $GITHUB_OUTPUT
      env:
        coverage_percentage: ${{ steps.coverage.outputs.coverage_percentage }}
    - name: Add coverage comment
      if: ${{ always() }}
      uses: actions/github-script@v4
      with:
        script: |
          import os
          from octokit import Octokit

          pr_number = context.payload.pull_request.number
          coverage_percentage = int(steps.coverage.outputs.percentage)

          comment = ''
          if coverage_percentage >= 80:
              comment = f':white_check_mark: Code coverage: {coverage_percentage}% - All tests passed!'
          else:
              comment = f':x: Code coverage: {coverage_percentage}% - Please improve test coverage.'

          # Crie uma instância do cliente Octokit com um token de acesso pessoal
          octokit = Octokit(auth='personal-access-token123')

          # Faça uma solicitação para obter informações sobre os repositórios de uma organização
          response = octokit.request("GET /orgs/{org}/repos", org="octokit", type="private")

          # Atualize a pull request com um PATCH request
          repo_owner = 'henriquepbalsimelli'
          repo_name = 'auth_poc_back_end'
          url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/pulls/{pr_number}"
          headers = {
              "Accept": "application/vnd.github+json",
              "Authorization": f"token {os.getenv('NEW_TOKEN')}",
              "X-GitHub-Api-Version": "2022-11-28"
          }
          data = {
              "title": comment,
              "body": f"PYTEST COVERAGE: {coverage_percentage}",
              "state": "open",
              "base": "master"
          }

          # Enviar o PATCH request
          response = octokit.request("PATCH", url, headers=headers, json=data)
